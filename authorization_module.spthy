theory authorization_module
begin

builtins: symmetric-encryption, multiset

functions: mac/2 // Define a mac function

rule Register_gw:
    []
    --[A_gw_registered($gw_id)]->
    [
        !Gateway($gw_id),
        !Gw_req_counter($gw_id, '1'+'1')
    ]

restriction gw_registered_once:
"
    All gw_id #i1 #i2. A_gw_registered(gw_id)@i1 & A_gw_registered(gw_id)@i2
        ==> #i1 = #i2
" 

// Pair the GW
rule Pairing:
    let
        session_keys = <key_us, key_su>
    in
    [
        Fr(key_us),
        Fr(key_su),
        !Gateway($gw_id)
    ]
    --[
        A_gw_paired($gw_id, session_keys),
        A_server_paired($srv_id, $gw_id, session_keys)
    ]->
    [
        !Gw_key_established($gw_id, session_keys),
        !Srv_key_confirmed($srv_id, $gw_id, session_keys),
        // Gw_req_counter($gw_id, '1'+'1', '1'+'1'),
        Srv_counter($srv_id, $gw_id, session_keys, '1')
        //!Gw_received_srv_nonce($gw_id, $zero) // will be needed for persistance module
    ]    

rule Reveal_gw:
    [!Gw_key_established(gw_id, session_keys)]
    --[A_reveal(gw_id)]->
    [Out(<gw_id, session_keys>)]

// Rule that models gw forgetting key, used to ensure
// that only one key can be active at once. Works together with
// the restrictions below.
rule Drop_key_gw:
    [
        !Gw_key_established(gw_id, session_keys)
    ]
    --[ Keys_not_dropped(gw_id, session_keys),
        A_gw_dropped_keys(gw_id, session_keys)]->
    []

restriction KeysNotDropped:
    "
    All gw_id session_keys #i. Keys_not_dropped(gw_id, session_keys)@i
        ==> not Ex #j. (A_gw_dropped_keys(gw_id, session_keys) @j & j < i)
    "

restriction gw_only_one_active_key:
    " All gw_id session_keys1 session_keys2 #i1 #i2.
    A_gw_paired(gw_id, session_keys1) @i1 & A_gw_paired(gw_id, session_keys2) @i2 & i1 < i2
        ==> (
                Ex #j. (
                    A_gw_dropped_keys(gw_id, session_keys1) @j
                    & j < i2
                )
        )
    "

// Give the adversary access to the counter
// Having the "In" rule here is a bit funny, but needed to avoid partial deconstructions.
// Because the counters are always initialized with a constant, this is fine.
rule Counter_reveal:
    [
        In(<$gw_id, count>), // To deal with partial deconstructions
        !Gw_req_counter($gw_id, count)
    ] --[
        A_reveal_counter($gw_id, count)
    ]-> [
        Out(<$gw_id, count>)
    ]

restriction counter_revealed_only_once:
    " All gw_id count #i1 #i2.
        A_reveal_counter(gw_id, count) @i1
        & A_reveal_counter(gw_id, count) @i2
            ==> #i1 = #i2 
    "

///////////////////////////////////////////////////////////////////////
// Reboot
///////////////////////////////////////////////////////////////////////

rule Gw_reboot:
    [!Gw_req_counter(gw_id, count)]
    --[
        A_gw_rebooted(gw_id),
        A_counter_used(gw_id, count)
    ]->
    [!Gw_req_counter(gw_id, count + '1')]

rule Increment_counter:
    [!Gw_req_counter(gw_id, count)]
    --[
        A_gw_counter_incremented(gw_id, count)
    ]->
    [!Gw_req_counter(gw_id, count + '1')]

///////////////////////////////////////////////////////////////////////
// Authorization
///////////////////////////////////////////////////////////////////////

/*
x -> gw: access_type
gw -> srv: <reboot_cnt, req_cnt, access_type, mac(<reboot_cnt, req_cnt, access_type>, key_su)>
srv -> gw: <rand, mac(<rand, mac(mac(<reboot_cnt, req_cnt, access_type>))>
*/

// Generate a request.
// Note that this rule is redundant, as the adversary could
// just create a request itself.
rule Auth_0_Send_request:
    []
    --[A_IssueRequest($access_type)]->
    [Out($access_type)]

// The GW receives a request and sends out a challenge
rule Auth_1_Gw_send_challenge:
    let
        challenge = < count, access_type >
        session_keys = <key_us, key_su>
    in
    [ 
        !Gw_key_established(gw_id, session_keys),
        In(count),
        !Gw_req_counter(gw_id, count),
        In(access_type),
        Fr(thread_id)
    ]
    --[
        Keys_not_dropped(gw_id, session_keys),
        A_Gw_issue_challenge(gw_id, thread_id, access_type),
        T_challenge_start(gw_id, thread_id, challenge),
        A_counter_used(gw_id, count)
    ]->
    [
        St_gw_pending(gw_id, session_keys, thread_id, access_type, challenge),
        Out(<'auth_chal', challenge, mac(challenge, key_us)>)
    ]

restriction counter_goes_up:
    "
    All gw_id count1 count2 #i1 #i2.
        A_counter_used(gw_id, count1) @i1 & A_counter_used(gw_id, count2)@i2 & i1 < i2
        ==> Ex z. count2 = count1 + z
    "



lemma gw_counter_never_the_same[use_induction]:
    "
    All gw_id count #i1 #i2.
    A_counter_used(gw_id, count) @i1
    & A_counter_used(gw_id, count) @i2
    ==> #i1 = #i2
    "

rule Auth_2_Srv_send_response:
    let
        session_keys = <key_us, key_su>
        challenge = < gw_count, access_type >
    in
    [
        !Srv_key_confirmed(srv_id, gw_id, session_keys),
        In(<'auth_chal', challenge, mac(challenge, key_us)>),
        Srv_counter(srv_id, gw_id, session_keys, srv_count),
        Fr(~new_nonce)
    ] --[
            IncrementingCounter(gw_count, srv_count),
            A_srv_grants_access(srv_id, gw_id, challenge, access_type, session_keys)
        ]->
    [
        Out(<'auth_resp', ~new_nonce, mac(<~new_nonce, mac(challenge, key_us)>, key_su)>),
        Srv_counter(srv_id, gw_id, session_keys, gw_count)
    ]

rule Auth_3_Gw_grant_access:
    let
        session_keys = <key_us, key_su>
        challenge = < count, access_type>
    in
    [
        !Gw_key_established(gw_id, session_keys),
        St_gw_pending(gw_id, session_keys, thread_id, access_type, challenge),
        In(<'auth_resp', new_server_nonce, mac(<new_server_nonce, mac(challenge, key_us)>, key_su)>)
    ] --[
        Keys_not_dropped(gw_id, session_keys),
        A_gw_access_granted(gw_id, thread_id, access_type),
        A_T5_gw_access_granted(gw_id, challenge, session_keys),
        A_gw_challenge_clear(gw_id, thread_id),
        T_access_start(gw_id, thread_id, challenge)
    ]->
    [
        St_gw_resource_accessible(gw_id, session_keys, thread_id, access_type)
    ]

rule Auth_gw_access_timeout:
    [
        St_gw_resource_accessible(gw_id, session_keys, thread_id, access_type)
    ] --[
        T_access_timeout(gw_id, thread_id),
        A_gw_access_revoked(gw_id, thread_id, access_type)
    ]->
    []

rule Auth_gw_drop_challenge:
    [St_gw_pending(gw_id, session_keys, thread_id, access_type, challenge)]
    --[
        A_gw_challenge_dropped(gw_id, thread_id, access_type),
        A_gw_challenge_clear(gw_id, thread_id)
    ]->
    []

rule Auth_gw_challege_timeout:
    [St_gw_pending(gw_id, session_keys, thread_id, access_type, challenge)]
    --[
        T_challenge_timeout(gw_id, thread_id),
        A_gw_challenge_clear(gw_id, thread_id)
    ]->
    []

// This rule is used by the lemmas to check
// for the presence of the St_gw_resource_accessible fact
rule Access_sensor:
    [
        St_gw_resource_accessible(gw_id, session_keys, thread_id, access_type)
    ] --[
        A_gw_sensor_accessed(gw_id, thread_id, access_type)
    ]->
    [
    ]

restriction gw_no_concurent_authentication:
    " All gw_id tid1 tid2 at1 at2 #i1 #i2.
        A_Gw_issue_challenge(gw_id, tid1, at1) @i1 & A_Gw_issue_challenge(gw_id, tid2, at2) @i2
        & i1 < i2
        ==> (
                Ex #j. (
                    A_gw_challenge_clear(gw_id, tid1) @#j
                    & j < i2
                )
        )
    "

restriction Reboot_requires_no_active_challenge:
    "
    All gw_id thread_id access_type #i #j.
        A_Gw_issue_challenge(gw_id, thread_id, access_type) @i
        & A_gw_rebooted(gw_id) @j
        & #i < #j
        ==> Ex #k. (
            A_gw_challenge_clear(gw_id, thread_id) @k
            & #k < #j
        )
    " 

restriction IncrementingCounter:
    "
    All gw_count srv_count #i. 
    IncrementingCounter(gw_count, srv_count) @i ==>
        Ex u. gw_count = srv_count + u
    "

//T1
lemma t_access_start_restrictions:
"
    All gw_id challenge thread_id #i.
        T_access_start(gw_id, thread_id, challenge) @i   // Whenever an access timer was started
        ==> Ex #j. (
            T_challenge_start(gw_id, thread_id, challenge) @j // A challenge timer C must have started
            & #j < #i                              // in the same thread and before
            & not Ex #k. (
                T_challenge_timeout(gw_id, thread_id) @k // and C must not have expired yet
                & k < i)
            )
"

//T2
lemma t_grant_after_chal:
"
    All srv_id gw_id challenge access_type session_keys #i.
        A_srv_grants_access(srv_id, gw_id, challenge, access_type, session_keys) @i
        ==> (
                Ex thread_id #j.
                    T_challenge_start(gw_id, thread_id, challenge) @j
                    & #j < #i
            ) | (
                Ex #j. A_reveal(gw_id) @j & #j < #i
                )
"

//T3
lemma t_access_after_grant:
"
    All gw_id challenge thread_id #i.
        T_access_start(gw_id, thread_id, challenge) @i
        ==> (
                Ex srv_id access_type session_keys #j.
                    A_srv_grants_access(srv_id, gw_id, challenge, access_type, session_keys) @j
                    & #j < #i
            ) | (
                Ex #j. A_reveal(gw_id) @j & #j < #i
            )
"

//T4
lemma t_access_during_timer:
"
    All gw_id thread_id access_type #i.
        A_gw_sensor_accessed(gw_id, thread_id, access_type) @i
        ==> (
            Ex challenge #j.
                T_access_start(gw_id, thread_id, challenge) @j
                & #j < #i
            ) & not Ex  #j.
                T_access_timeout(gw_id, thread_id) @j
                & #j < #i
"

//T5-1
lemma no_double_access_for_same_challenge[reuse]:
"
    All gw_id challenge session_keys #i1 #i2.
        A_T5_gw_access_granted(gw_id, challenge, session_keys) @i1
        & A_T5_gw_access_granted(gw_id, challenge, session_keys) @i2
            ==> #i1 = #i2
"  

//T5-2
lemma grant_required:
"
    All gw_id challenge session_keys #i.
        A_T5_gw_access_granted(gw_id, challenge, session_keys) @i
            ==> ( Ex srv_id at #j.
            A_srv_grants_access(srv_id, gw_id, challenge, at, session_keys) @j
            & j < i
            ) | (
                Ex #j.
                A_reveal(gw_id) @j & j < i
            )
" 

//T5 joint
lemma one_access_per_grant:
"
(    All gw_id challenge session_keys #i1 #i2.
    A_T5_gw_access_granted(gw_id, challenge, session_keys) @i1
    & A_T5_gw_access_granted(gw_id, challenge, session_keys) @i2
        ==> #i1 = #i2
)
& (
    All gw_id challenge session_keys #i.
    A_T5_gw_access_granted(gw_id, challenge, session_keys) @i
        ==> ( Ex srv_id at #j.
        A_srv_grants_access(srv_id, gw_id, challenge, at, session_keys) @j
        & j < i
        ) | (
            Ex #j.
            A_reveal(gw_id) @j & j < i
        )
)

"

lemma executable_gw_granted_paired_twice:
    exists-trace
    "
    (   Ex gw_id thread_id access_type session_keys_1 session_keys_2 #i #p1 #p2. (
            A_gw_paired(gw_id, session_keys_1) @ p1
            & A_gw_paired(gw_id, session_keys_2) @ p2
            & A_gw_access_granted(gw_id, thread_id, access_type)@i
            & #p1 < #p2
            & #p2 < #i
        )
    ) & (
    All gw_id_1 gw_id_2 tid_1 tid_2 at_1 at_2 #i1 #i2. 
            A_Gw_issue_challenge(gw_id_1, tid_1, at_1) @i1
            & A_Gw_issue_challenge(gw_id_2, tid_2, at_2) @i2
         ==> #i1 = #i2
    ) & (    
        not Ex gwid count #i.
            A_reveal_counter(gwid, count) @i
    ) & (    
        not Ex gwid #i. A_gw_rebooted(gwid) @i
    ) & (
        not Ex gwid #i. A_reveal(gwid) @i
    )
    "

lemma executable_gw_revoked:
    exists-trace
    "
    (   Ex gw_id thread_id access_type #i. (
            A_gw_access_revoked(gw_id, thread_id, access_type)@i
        )
    ) & (
    All gw_id_1 gw_id_2 tid_1 tid_2 at_1 at_2 #i1 #i2. 
            A_Gw_issue_challenge(gw_id_1, tid_1, at_1) @i1
            & A_Gw_issue_challenge(gw_id_2, tid_2, at_2) @i2
         ==> #i1 = #i2
    ) & (    
        not Ex gwid count #i.
            A_reveal_counter(gwid, count) @i
    ) & (    
        not Ex gwid #i. A_gw_rebooted(gwid) @i
    ) & (
        not Ex gwid #i. A_reveal(gwid) @i
    )
    "

lemma executable_gw_revoked_twice:
    exists-trace
    "
    (   Ex gw_id thread_id_1 thread_id_2 access_type_1 access_type_2 #i1 #i2. (
            A_gw_access_revoked(gw_id, thread_id_1, access_type_1) @i1
            & A_gw_access_revoked(gw_id, thread_id_2, access_type_2) @i2
            & i1 < i2
        )
    ) & (
    All gw_id session_keys_1 session_keys_2 #i1 #i2. 
        A_gw_paired(gw_id, session_keys_1) @i1
        & A_gw_paired(gw_id, session_keys_2) @i2
        ==> #i1 = #i2
    ) & (
        All gw_id_1 gw_id_2 gw_id_3 tid_1 tid_2 tid_3 at_1 at_2 at_3 #i1 #i2 #i3. 
            A_Gw_issue_challenge(gw_id_1, tid_1, at_1) @i1
            & A_Gw_issue_challenge(gw_id_2, tid_2, at_2) @i2
            & A_Gw_issue_challenge(gw_id_3, tid_3, at_3) @i3
        ==> (#i1 = #i2 | #i2 = #i3 | #i1 = #i3)
    ) & (    
        not Ex gwid count #i.
            A_reveal_counter(gwid, count) @i
    ) & (    
        not Ex gwid #i. A_gw_rebooted(gwid) @i
    ) & (
        not Ex gwid #i. A_reveal(gwid) @i
    )
    "

lemma executable_gw_grant_reboot_grant:
    exists-trace
    "
    (   Ex gw_id thread_id_1 thread_id_2 access_type_1 access_type_2 #i1 #i2 #j. (
            A_gw_access_granted(gw_id, thread_id_1, access_type_1) @i1
            & A_gw_rebooted(gw_id) @j
            & A_gw_access_granted(gw_id, thread_id_2, access_type_2) @i2
            & i1 < j
            & j < i2
        )
    ) & (
    All gw_id session_keys_1 session_keys_2 #i1 #i2. 
        A_gw_paired(gw_id, session_keys_1) @i1
        & A_gw_paired(gw_id, session_keys_2) @i2
        ==> #i1 = #i2
    ) & (
        All gw_id_1 gw_id_2 gw_id_3 tid_1 tid_2 tid_3 at_1 at_2 at_3 #i1 #i2 #i3. 
            A_Gw_issue_challenge(gw_id_1, tid_1, at_1) @i1
            & A_Gw_issue_challenge(gw_id_2, tid_2, at_2) @i2
            & A_Gw_issue_challenge(gw_id_3, tid_3, at_3) @i3
        ==> (#i1 = #i2 | #i2 = #i3 | #i1 = #i3)
    ) & (    
        All gw_id #i1 #i2.
            A_gw_rebooted(gw_id) @i1
            & A_gw_rebooted(gw_id) @i2
        ==> #i1 = #i2
    ) & (    
        not Ex gwid count #i.
            A_reveal_counter(gwid, count) @i
    ) & (
        not Ex gwid #i. A_reveal(gwid) @i
    )
    "


end